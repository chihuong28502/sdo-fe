// app/services/ai.ts

import axios from "axios";

// src/types/index.ts
export interface NodeContext {
  text: string;
  level: number;
}

export interface TreeNode {
  id: string;
  name: string;
  level: number;
  children?: TreeNode[];
}
// src/services/ai.ts

export async function generateNodes(prompt: string, contexts: NodeContext[] = []): Promise<string[] | null> {
  const API_KEY = process.env.NEXT_PUBLIC_GEMINI_API_KEY;

  try {
    const contextString = contexts
      .map(ctx => `Level ${ ctx.level }: "${ ctx.text }"`)
      .join(' -> ');

    const response = await fetch(
      'https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent',
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'x-goog-api-key': API_KEY || ''
        },
        body: JSON.stringify({
          contents: [{
            parts: [{
              text: `T√¥i ƒëang t·∫°o m·ªôt s∆° ƒë·ªì ph√¢n c·∫•p. ƒê√¢y l√† ƒë∆∞·ªùng d·∫´n ng·ªØ c·∫£nh hi·ªán t·∫°i:
                ${ contextString }
                Y√™u c·∫ßu c·ªßa ng∆∞·ªùi d√πng ƒë·ªÉ t·∫°o c√°c node con: "${ prompt }"
                
                D·ª±a tr√™n ng·ªØ c·∫£nh n√†y, h√£y t·∫°o 4-6 node con li√™n quan.
                Node con ph·∫£i c√≥ li√™n quan ƒë·∫øn c·∫£ node cha tr·ª±c ti·∫øp v√† to√†n b·ªô ng·ªØ c·∫£nh.
                
                Ch·ªâ tr·∫£ v·ªÅ m·ªôt m·∫£ng JSON ch·ª©a t√™n c√°c node, v√≠ d·ª•: ["Node 1", "Node 2", "Node 3"].
                V√≠ d·ª•: n·∫øu ng·ªØ c·∫£nh l√† C√¥ng ngh·ªá -> Ph·∫ßn m·ªÅm -> Ph√°t tri·ªÉn, v√† input l√† "C√¥ng c·ª•",
                th√¨ tr·∫£ v·ªÅ: ["IDE", "H·ªá th·ªëng qu·∫£n l√Ω phi√™n b·∫£n", "Build tools", "Debugging"]
                
                CH·ªà tr·∫£ v·ªÅ m·∫£ng JSON, kh√¥ng th√™m n·ªôi dung kh√°c.`
            }]
          }]
        })
      }
    );

    const data = await response.json();

    if (data.candidates?.[0]?.content?.parts?.[0]?.text) {
      const text = data.candidates[0].content.parts[0].text.trim();
      try {
        const parsedNodes = JSON.parse(text);
        if (Array.isArray(parsedNodes)) {
          return parsedNodes;
        }
      } catch (e) {
        const match = text.match(/\[([^\]]+)\]/);
        if (match) {
          try {
            const parsedNodes = JSON.parse(match[0]);
            if (Array.isArray(parsedNodes)) {
              console.log("üöÄ ~ parsedNodes:", parsedNodes)
              return parsedNodes;
            }
          } catch (e2) {
            console.error('Error parsing matched JSON:', e2);
          }
        }
      }
    }

    return null;
  } catch (error) {
    console.error('Error calling Gemini API:', error);
    return null;
  }
}
export async function generateNodesFromDb(prompt: string, idChildrent: string): Promise<any> {
  const res = await axios.post(`${ process.env.NEXT_PUBLIC_API_SERVER }/tree/generate-nodes`, {
    prompt,
    idChildrent
  });
  console.log("res.data", res.data);

  return res.data;
}

export async function generateAllProject(): Promise<any> {
  const res = await axios.get(`${ process.env.NEXT_PUBLIC_API_SERVER }/tree/get-all-projects`);
  console.log("res.data", res.data);

  return res.data.data;
}

export async function generateProjectById(id: any): Promise<any> {
  const res = await axios.get(`${ process.env.NEXT_PUBLIC_API_SERVER }/tree/get-project/${ id }`);
  console.log("res.data", res.data);

  return res.data.data;
}

export async function createNodeByAi({ prompt, idChildrent }: any): Promise<any> {
  const res = await axios.post(`${ process.env.NEXT_PUBLIC_API_SERVER }/tree/generate-nodes`, { prompt, idChildrent });

  return res.data.data;
}
export async function createNodeNormal(): Promise<any> { }
// src/services/tree.ts
